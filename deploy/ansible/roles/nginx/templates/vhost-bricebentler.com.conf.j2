# {{ ansible_managed }}
upstream bricebentlerfpm {
    server unix:{{ php_fpm_bricebentler_socket_file }};
}

{% if pre_lets_encrypt is not defined or pre_lets_encrypt != True %}
    # Redirect 80 to 443 (HTTP to HTTPS).
    server {
        listen 80;
        listen [::]:80;
        server_name www.bricebentler.com;

        return 301 https://www.bricebentler.com$request_uri;
    }

    # Redirect apex (non-www) to www.
    server {
        listen 80;
        listen [::]:80;
        server_name bricebentler.com;

        return 301 https://www.bricebentler.com$request_uri;
    }
{% endif %}

server {
    {% if pre_lets_encrypt is defined and pre_lets_encrypt == True %}
        listen 80 default_server;
        listen [::]:80 default_server;
    {% else %}
        listen 443 default_server ssl;
    {% endif %}
    server_name www.bricebentler.com;

    client_max_body_size {{ nginx_client_max_body_size_bricebentler }};

    access_log {{ application_logs_path }}/bricebentler.nginx.access.log main;
    error_log {{ application_logs_path }}/bricebentler.nginx.error.log;

    root {{ bricebentler_docroot }};

    {% if pre_lets_encrypt is not defined or pre_lets_encrypt != True %}
        add_header Strict-Transport-Security "max-age={{ nginx_hsts_max_age }}" always;

        ssl_certificate {{ lets_encrypt_certs_path }}/fullchain.pem;
        ssl_certificate_key {{ lets_encrypt_certs_path }}/privkey.pem;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;
    {% endif %}

    # Lets Encrypt domain verification.
    location ~ /.well-known {
        allow all;
    }

    # Proxy PHP requests to the FastCGI backend
    location ~ \.php(/|$) {
        try_files $uri =404;

        fastcgi_buffers 8 8k;
        fastcgi_buffer_size 8k;

        fastcgi_pass bricebentlerfpm;
        fastcgi_index index.php;
        include fastcgi.conf;

        # Fix httpoxy vulnerability. See: httpoxy.org
        fastcgi_param HTTP_PROXY "";
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    # Try to send all non-existing files to the main /index.php (Frameworks)
    location @indexphp {
        if (-f $document_root/index.php) { rewrite .* /index.php last; }
    }

    try_files $uri @indexphp;
}

server {
    listen 80;
    listen [::]:80;
    server_name localhost 127.0.0.1;

    client_max_body_size {{ nginx_client_max_body_size_bricebentler }};

    access_log {{ application_logs_path }}/bricebentler.nginx.access.log main;
    error_log {{ application_logs_path }}/bricebentler.nginx.error.log;

    root {{ bricebentler_docroot }};

    # Proxy PHP requests to the FastCGI backend
    location ~ \.php(/|$) {
        try_files $uri =404;

        fastcgi_buffers 8 8k;
        fastcgi_buffer_size 8k;

        fastcgi_pass bricebentlerfpm;
        fastcgi_index index.php;
        include fastcgi.conf;

        # Fix httpoxy vulnerability. See: httpoxy.org
        fastcgi_param HTTP_PROXY "";
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    # Try to send all non-existing files to the main /index.php (Frameworks)
    location @indexphp {
        if (-f $document_root/index.php) { rewrite .* /index.php last; }
    }

    try_files $uri @indexphp;
}
